ServerSignature^Off^This directive allows the configuration of a trailing footer line under server-generated documents (error messages, mod_proxy ftp directory listings, mod_info output, ...). The reason why you would want to enable such a footer line is that in a chain of proxies, the user often has no possibility to tell which of the chained servers actually produced a returned error message.^The Off setting, which is the default, suppresses the footer line (and is therefore compatible with the behavior of Apache-1.2 and below). The On setting simply adds a line with the server version number and ServerName of the serving virtual host, and the EMail setting additionally creates a mailto: reference to the ServerAdmin of the referenced document.After version 2.0.44, the details of the server version number presented are controlled by the ServerTokens directive. Note: In any case, it is recommended to hide the Apache Version number, and other sensitive information.Be advised that if we do not disable the ServerSignature setting, we may be reducing the security benefit gained by changing the ServerTokens. While it is true that the ServerSignature would show only the Apache server token setting we specified in the ServerTokens directive, this signature feature is still in the Apache style and may be an additional identifier. By removing the ServerSignature, we can take another step towards protecting our web server software information.
ServerTokens^Prod^This directive controls whether Server response header field that is sent back to clients includes a description of the generic OS-type of the server as well as information about compiled-in modules. The ServerTokens directive is used to determine what Apache will put in the Server HTTP response header.^This setting applies to the entire server, and cannot be enabled or disabled on a virtualhost-by-virtualhost basis. (By setting it to Prod it sets the HTTP response header as like: Server: Apache) If you are super paranoid you could change this to something other than Apache by editing the source code, or by using mod_security.  Note: In any case, make sure apache is running under its own user account and group.
TimeOut^45^This directive allow to control the amount of time the server will wait for certain events before failing a request.^One way of attacking systems on the Internet is to try to prevent the target system from operating correctly by overloading it. This is called a denial of service attack. One method of doing this is to open multiple connections to a server and never close them. The more connections the server has open at once, the more resources are tied up holding details of those connection, which can lead to increased load and eventually to the server running out of resources. The Timeout directive tells the server how long to wait to receive a GET request, the amount of time between receipt of TCP packets on a POST or PUT request, or the amount of time between ACKs on transmissions of TCP packets in responses. In order to prevent a denial of service attack from shutting down our web server, we need to change the default setting of 300 (which is 5 minutes) to 60 (which is 1 minute). You may even adjust this setting to be lower than 60. Be advised also that the timeout setting is the number of seconds before data sends or receives (to or from the client) time out. Having this set to a high number forces site visitors to wait in line which adds extra load to the server.TraceEnable^Off^This directive allows to determine the behavior on TRACE requests. The default TraceEnable on permits TRACE requests per RFC 2616, which disallows any request body to accompany the request.  TraceEnable off causes the core server and mod_proxy to return a 405 FORBIDDEN error to the client. Finally, for testing and diagnostic purposes only, request bodies may be allowed using the non-compliant TraceEnable extended directive. The core (as an origin server) will restrict the request body to 64k (plus 8k for chunk headers if Transfer-Encoding: chunked is used). The core will reflect the full headers and all chunk headers with the request body. As a proxy server, the request body is not restricted to 64k. At this time the Apache 1.3 mod_proxy does not permit chunked request bodies for any request, including the extended TRACE request.^ Most vulnerability scanners (like the popular nessus, but commercial ones also) will complain (normally as a low thread or warning level) about TRACE method being enabled on the web server tested. Normally you will have this enabled by default, but if you want to test if it is really enabled on your server you just have to telnet on the port your web server is running and request for TRACE / HTTP/1.0 if you get a positive reply it means TRACE is enabled on your system.  Traditionally experts will suggest to disable this using some rewrite rules since this could pose a security risk on the server.
LimitRequestBody^None^This directive specifies the number of bytes from 0 (meaning unlimited) to 2147483647 (2GB) that are allowed in a request body.^The LimitRequestBody directive allows the user to set a limit on the allowed size of an HTTP request message body within the context in which the directive is given (server, per-directory, per-file or per-location). If the client request exceeds that limit, the server will return an error response instead of servicing the request. The size of a normal request message body will vary greatly depending on the nature of the resource and the methods allowed on that resource. CGI scripts typically use the message body for retrieving form information. Implementations of the PUT method will require a value at least as large as any representation that the server wishes to accept for that resource. Moreover, This directive gives the server administrator greater control over abnormal client request behavior, which may be useful for avoiding some forms of denial-of-service attacks. Thus it is recommended limit the size of LimitRequestBody directiv. This directive is set to unlimited by default. If you are allowing file uploads of no larger than 1MB, you could set this setting to something (e.g., LimitRequestBody 1048576).
LimitXMLRequestBody^Smaller Value^Limits the size of an XML-based request body.^If you are running mod_dav (typically used with subversion) then you may want to limit the max size of an XML request body. The LimitXMLRequestBody directive is only available on Apache 2, and its default value is 1 million bytes (approx 1mb). Many people will have you set this value to 0 which means files of any size may be uploaded, which may be necessary if you are using WebDAV to upload large files, but if you are simply using it for source control, you can probably get away with setting an upper bound, such as 10MB (i.e., LimitXMLRequestBody 10485760).
AllowOverride^None^This directive explicitly sets the base URL for per-directory rewrites. In particular, this directive declares which directives in distributed .htaccess files can override directives from the parent levels (httpd.conf). In context of ISAPI_Rewrite this directive in fact enables or disables .htaccess files for specific virtual host (web site) or directory. Only three values are currently supported: All, None and FileInfo. All and FileInfo enables .htaccess file and all ISAPI_Rewrite directives in it. None disables all .htaccess files and directives. This directive is inheritable. This means if you specify AllowOverride none for some directory or virtual host .htaccess files will also be disabled for all subdirectories.^You can improve the performance of your website by disabling AllowOverride in all directories except the ones which contain an .htaccess file. If AllowOverride is enabled for your entire website, each directory is searched for it is own .htaccess file, and most directories will not contain one. To specify which directories contain an .htaccess file and which ones do not, we use AllowOverride. Disable AllowOverride in your root folder (like: /home or /public_html) and enable AllowOverride only in directories which contain an .htaccess file. (For example, to disable AllowOverride in your root folder, place the following code in your .htaccess file: AllowOverride None).
KeepAlive^On^This directive enables HTTP persistent connections.^According to the Apache documentation using HTTP Keep Alive can improve client performance by as much as 50 percent, so be careful before changing these settings, you will be trading performance for a slight denial of service mitigation. KeepAlive are turned on by default and you should leave them on. Analyze your log files to determine the appropriate values.
KeepAliveTimeout^15^The number of seconds Apache will wait for a subsequent request before closing the connection. Once a request has been received, the timeout value specified by the Timeout directive applies.^Setting KeepAliveTimeout to a high value may cause performance problems in heavily loaded servers. The higher the timeout, the more server processes will be kept occupied waiting on connections with idle clients. In a name-based virtual host context, the value of the first defined virtual host (the default host) in a set of NameVirtualHost will be used. The other values will be ignored. The value for KeepAliveTimeout should be tuned carefully to determine what works for your site.
MaxKeepAliveRequests^500 or more^Number of requests allowed on a persistent connection.^The MaxKeepAliveRequests directive limits the number of requests allowed per connection when KeepAlive is on. If it is set to 0, unlimited requests will be allowed. It is recommended that this setting be kept to a high value for maximum server performance.
MaxRequestsPerChild^None^Limit on the number of requests that an individual child server will handle during its life.^The MaxRequestsPerChild directive sets the limit on the number of requests that an individual child server process will handle. After MaxRequestsPerChild requests, the child process will die. If MaxRequestsPerChild is 0, then the process will never expire. Different default values. The default value for mpm_netware and mpm_winnt is 0. Setting MaxRequestsPerChild to a non-zero value limits the amount of memory that process can consume by (accidental) memory leakage. Note For KeepAlive requests, only the first request is counted towards this limit. In effect, it changes the behavior to limit the number of connectionsper child.
MaxClients^None^This directive sets the limit on the number of simultaneous requests that will be served. Any connection attempts over the MaxClients limit will normally be queued, up to a number based on the ListenBacklog directive.  Once a child process is freed at the end of a different request, the connection will then be serviced.^ Apache has several configuration settings that can be used to adjust handling of concurrent requests. The MaxClients is the maximum number of child processes that will be created to serve requests. This may be set too high if your server does not have enough memory to handle a large number of concurrent requests. In particular, for non-threaded servers (i.e., prefork), MaxClients translates into the maximum number of child processes that will be launched to serve requests. The default value is 256; to increase it, you must also raise ServerLimit. In contrast, for threaded and hybrid servers (e.g. beos or worker) MaxClients restricts the total number of threads that will be available to serve clients. The default value for beos is 50. For hybrid MPMs the default value is 16 (ServerLimit) multiplied by the value of 25 (ThreadsPerChild). Therefore, to increase MaxClients to a value that requires more than 16 processes, you must also raise ServerLimit.
LogLevel^crit^This directive controls the number of messages logged to the error_log.^You can adjust the verbosity of the messages recorded in the error logs by setting an approportiate log level from the avaliable level list. Althogh the choice of level value is personal, it is recommended to set it to crit. Further, in production generally log WARN and above is perfered.  
ErrorLog^Set Secure Path^This directive defines the location of the error log file. If you do not specify an ErrorLog directive within a VirtualHost container, error messages relating to that virtual host will be logged here. If you do define an error logfile for a VirtualHost container, that host errors will be logged there and not here.^The server error log, whose name and location is set by the ErrorLog directive, is the most important log file. This is the place where Apache httpd will send diagnostic information and record any errors that it encounters in processing requests. It is the first place to look when a problem occurs with starting the server or with the operation of the server, since it will often contain details of what went wrong and how to fix it. The error log is usually written to a file (typically error_log on unix systems and error.log on Windows and OS/2). On unix systems it is also possible to have the server send errors to syslog orpipe them to a program.  Anyone who can write to the directory where Apache is writing a log file can almost certainly gain access to the uid that the server is started as, which is normally root. Do NOT give people write access to the directory the logs are stored in without being aware of the consequences; see the security tips document for details. In addition, log files may contain information supplied directly by the client, without escaping. Therefore, it is possible for malicious clients to insert control-characters in the log files, so care must be taken in dealing with raw logs.
Options^Enable/Disable options carefully^This directive allows to configures what features are available in a particular directory. ^You must ensure that files outside the web root are not served, since we do not want apache to be able to access any files out side of its web root. So assuming all your web sites are placed under one directory (say, /web), you would set it up as  Options None.  You should turn off directory browsing by setting this directive inside a Directory tag to either None or Indexes. You should turn off server side includes by setting the Options directive inside a Directory tag to either None or Includes.  If you are not using CGI turn it off with the Options directive inside a Directory tag to either None or  ExecCGI Options ExecCGI. Furthermore, beware to do not allow apache to follow symbolic links. This can be done using the Options directive inside a Directory tag, that is set Options to either None or FollowSymLinks.
ServerAdmin^Email Address^ This directive enables to set the EMail address that the server includes in any error messages it returns to the client.^The ServerAdmin directive is the email address for the site web administrator. The security vulnerabilities associated with publicly displaying an actual user email address may seem trivial, however, do not underestimate the security implications. Specifying a user local email address, such as,  Jdoe[at]webserver.com reveals that user local OS account name. Using an e-mail alias such as SysAdmin[at]companyx.com instead of RealName[at]companyx.com, reduces the likelihood of a successful e-mail spoofing attack. This technique can also prevent attackers from determining legitimate system usernames from the e-mail addresses. For instance, if your ServerAdmin setting was this: ServerAdmin bsmith[at]www.companyx.com. According to Apache Security benchmark report, it would be a good bet that bsmith is an actual user account name on this server. With this information, an attacker could then try to gain OS level access to the system by Brute Forcing the bsmith account. An additional benefit that comes with using the Webmaster email address instead of an actual user email account is redundancy. What happens if you put your personal email address in the ServerAdmin directive and then when you away from work for an extended period of time, who else gets these emails? If you use an email alias group for WebAdmin[at]yourhostname.com, then these emails will actually be forwarded to a group of people instead of an individual.
ErrorDocument^None^This directive allows what the server will return to the client in case of an error. In the event of a problem or error, Apache can be configured to do one of four things: i) output a simple hard coded error message; ii) output a customized message; iii) redirect to a local URL path to handle the problem or error; iv) redirect to an external URL to handle the problem or error. The first option is the default, while options 2 to 4 are configured using the ErrorDocument directive, which is followed by the HTTP response code and a URL or a message. Apache will sometimes offer additional information regarding the problem or error. URLs can begin with a slash for local web paths (relative to the DocumentRoot), or be a full URL which the client can resolve. Alternatively, a message can be provided to be displayed by the browser.^Each type of web server has its own distinct style of error pages. The server sends these pages when an error, such as 404 Not found, has occurred. By issuing a request for a file that is not present on a web server, an attacker may determine the web server software by simply identifying the 404 (Not Found) error pages displayed. To avoid this software disclosure, the default error pages presented by the web server must be changed.