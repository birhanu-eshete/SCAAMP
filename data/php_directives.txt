allow_url_fopen^Off^If enabled, it allows PHP file functions such as file_get_contents and the include and require statements to retrieve data from remote locations, like an FTP or web site. Programmers frequently forget this and do not do proper input filtering when passing user-provided data to these functions, opening them up to code injection vulnerabilities.Most code injection attacks are when this directive is on or due to bad input filtering mechanisms.When switched off, it insures that remote inclusion of files is impossible. However, proper input filtering is equally suggested as a supplement.^Can be disabled in Apache httpd.conf as:php_flag  allow_url_fopen  off. For remote file access, consider using the cURL functions that PHP provides.
allow_url_include^Off^If disabled, allow_url_include bars remote file access via the include and require statements, but leaves it available for other file functions like fopen and file_get_contents. include and require are the most common attack points for code injection attempts, so this setting plugs that particular hole without affecting the remote file access capabilities of the standard file functions. Note that at this point it is still recommended disabling allow_url_fopen as well, but developers who are confident in their secure coding practices may want to leave allow_url_fopen enabled.^Can be disabled in Apache httpd.conf as:php_flag  allow_url_inlcude  off. If allow_url_fopen is disabled, allow_url_include is also disabled.
display_errors^Off^he display_errors directive determines whether error messages should be sent to the browser. These messages frequently contain sensitive information about your web application environment, and should never be presented to untrusted sources.Unless you are in a closed development state, display_errors should be disabled, and all error messages should be passed to system log files using the log_errors directive.^Can be enabled in Apache httpd.conf as:php_flag  display_errors  on.
expose_php^Off^When enabled, expose_php reports in every request that PHP is being used to process the request, and what version of PHP is installed. Malicious users looking for potentially vulnerable targets can use this to identify a weakness. Turn expose_php off. It will not by itself defend off a determined attacker, but it will lower visibility to attacks that rely on simple reconnaissance techniques to scan for vulnerable targets.^You can only disable expose_php in the php.ini file.
group_id^100^Checks the group ID of the PHP process to see if it is less than 100. If the executing user belongs to more than one group, the lowest group ID it belongs to is used. Group IDs under 100 are generally reserved for privileged or system users. If PHP executes as a group ID under 100, it may have access to read or manipulate system files. Change the user and group that PHP executes as. If you are using the Apache module, you will need to change what user Apache runs as with the User and Group directives. If PHP is executing as a CGI, look at a method of executing CGIs as a non-privileged user like Apache suEXEC or mod_suPHP.^none
file_uploads^Off^When you allow files to be uploaded to your system you assume a number of risks, files may not be what the appear (executables masquerading as images, php scripts uploaded and moved to a location where they may be run, et-cetera). If your site does not actually require file uploads, disabling this will prevent files from being accepted inadvertently.^The setting can also be disabled in apache httpd.conf file:php_flag  file_uploads  off.
magic_quotes_gpc^Off^The magic quotes option was introduced to help protect developers from SQL injection attacks. It effectively executes addslashes on all information received over GET, POST or COOKIE. Unfortunately this protection is not perfect: there are a series of other characters that databases interpret as special not covered by this function. In addition, data not sent direct to databases must un-escaped before it can be used. Because it is inconsistent and ineffective, it is not recommended that magic_quotes_gpc be enabled. Rely on input filtering done by your scripts.^The setting can also be disabled in apache httpd.conf file, or an .htaccess file:php_flag  magic_quotes_gpc  off.
memory_limit^8M^As with all applications, PHP applications require memory to execute. By enabling a realistic memory_limit you can protect your applications from certain types of denial of service attacks, and also from bugs in applications-such as infinite loops, poor use of image based functions, or other memory intensive mistakes. A setting of 8MB is sufficient for the vast majority of scripts, but still aggressive enough to catch problems before too much damage is done.^The setting can also be applied in apachE httpd.conf file, or an .htaccess file:php_value  memory_limit  8M.
open_basedir^Off^open_basedir limits the PHP process from accessing files outside of specifically designated directories. Remember this setting will only affect PHP scripts. Applications written in other languages  such as Perl, Python, Ruby, etc, will not be affected. Set open_basedir to only allow access to required portions of the file system, like your web site documents and any shared libraries.You can set open_basedir in the php.ini file as open_basedir = /var/www/foo.bar/:/usr/local/php/.^The setting can also be applied in apache httpd.conf file, or an .htaccess file:php_value  open_basedir=/var/www/foo.bar/:/usr/local/php/.
post_max_size^256K^This protection allows you to limit the maximum size of POST request that PHP will process. Attackers may attempt to send oversized POST requests to exhaust your system resources. By setting a realistic value here you can mitigate some of the damage by those attacks.^The setting can also be applied in apache httpd.conf file, or an .htaccess file as php_value  post_max_size  256K.
register_globals^Off^When register_globals is enabled, PHP will automatically create variables in the global scope for any value passed in GET, POST or COOKIE. This, combined with the use of variables without initialization, has lead to numerous security vulnerabilities. Since application developers should be aware when accessing tainted user input, it is better practice to access the variables through their respective super globals.register_globals will not be available in PHP 6.^The setting can also be disabled in apache httpd.conf file, or an .htaccess file as php_flag  register_globals  off.
upload_max_filesize^2M^Upload_max_filesize limits the maximum size of files that PHP will accept through uploads. Attackers may attempt to send abnormally oversized files to exhaust your system resources By setting a realistic value here you can mitigate some of the damage by those attacks. By default, PHP sets this value to 2MB.^The setting can also be applied in apache httpd.conf file, or an .htaccess file as php_value  upload_max_filesize  256K.
upload_tmp_dir^tmp/^upload_tmp_dir allows you to specify where uploaded files should be saved until the handling script moves them to a more permanent location. If this file is within the document root of the web site and/or accessible to system users other than PHP user, it could be modified or overwritten while PHP is processing it. By default upload_tmp_dir is set to the system standard temporary directory, which can typically be accessed by all system users.Set upload_tmp_dir to a folder that is outside the document root of your web site not readable or writable by any other system users.^The setting can also be applied in apache httpd.conf file, or an .htaccess file as upload_tmp_dir to a safe location.
user_id^100^User IDs under 100 are generally reserved for privileged or system users. If PHP executes as a userid under 100, it may have access to read or manipulate system files.Change the user and group that PHP executes as. If you are using the Apache module, you will need to change what user Apache runs as with the User and Group directives. If PHP is executing as a CGI, look at a method of executing CGIs as a non-privileged user like Apache suEXEC or mod_suPHP.^none
file_support^Current PHP version^Older versions of the curl library shipped with PHP allowed it to bypass the restrictions put in place by open_basedir or safe_mode using a file:// URL. You should always be running the newest version of PHP. Check php.net for the most recent release. If you are installing PHP via a package manager, contact your OS vendor and ask them to start using the newest PHP release.^none
session.save_path^non world r/w directory^This setting specifies where session files should be saved when using the default session handler. This must be a document outside the document root, and should only be accessible by the web user to prevent other users on the system from investigating your users sessions.This setting should be unique on a virtual host basis when those virtual hosts are controlled by different entities, such as a shared host situation, to prevent sites from reading each others sessions.^The setting can also be applied in apache httpd.conf file, or an .htaccess file to a safe location.
session.use_trans_sid^Off^When use_trans_sid is enabled, PHP will pass the session ID via the URL. This makes it far easier for a malicious party to obtain an active session ID and hijack the session.^The setting can also be disabled in apachE httpd.conf file as php_flag  session.use_trans_sid  off. Under PHP5, you can also use a .htaccess file to disable use_trans_sid.
allow_call_time_pass_reference^Off^Whether to warn when arguments are passed by reference at function call time. The encouraged method of specifying which arguments should be passed by reference is in the function declaration. You are encouraged to try and turn this option Off and make sure your scripts work properly with it in order to ensure they will work with future versions of the language.^none
disable_functions^function1 function2 function3 and so on^There are certain functions in PHP that you probably do not want your developers to use because of the danger they pose. Even if you know your users are not utilizing certain functions it is wise to completely disable them so an attacker can not use them. This security precaution is especially effective at stopping an attacker who has somehow managed to upload a PHP script, write one to the filesystem, or even include a remote PHP file. By disabling this functionality you ensure that you can limit the effectiveness of these types of attacks. It should be noted that it is virtually impossible to do something like preventing an attacker from executing a command at a shell by disabling functions, but it can certainly stop an attacker who is not a skillful PHP programmer.^List function names you do not want programmers to use.
cgi.force_redirect^On^cgi.force_redirect is necessary to provide security running PHP as a CGI under most web servers. Left undefined, PHP turns this on by default.^none
display_startup_errors^Off^Even when display_errors is on, errors that occur during PHP startup sequence are not displayed. It is strongly recommended to keep display_startup_errors off, except for debugging purpose.^none
error_log^syslog^This parameter specifies the name of the file, which will be used to store information about warnings and errors.Attention: this file must be writeable by the user or group apache.^none
error_reporting^Off^nIn PHP 4 and PHP 5 the default value expose_php	off is E_ALL & ~E_NOTICE. This setting does not show E_NOTICE level errors. You may want to show them during development.^none
extension_dir^$HOME:/php5/ext/^n what directory PHP should look for dynamically loadable extensions.^none
fastcgi.impersonate^Off^FastCGI under IIS on WINNT based OS supports the ability to impersonate security tokens of the calling client. This allows IIS to define the security context that the request runs under. mod_fastcgi under Apache does not currently support this feature (03/17/2002) Set to 1 if running under IIS.^none
include_path^"."^Specifies a list of directories where the require(),include(), fopen(), file(), readfile () andfile_get_contents() functions look for files. The format is like the system PATH environment variable: a list of directories separated with a colon in Unix or semicolon in Windows.^none
log_errors^On^When log_errors is turned on, all the warnings and errors are logged into the file that is specified by the error_log parameter. If this file is not accessible, information about warnings and errors are logged by the Apache server.^none
max_execution_time^30^Max_execution_time declare how long a process can run. Make sure that you do not assign unreasonably longer execution time.^none
max_input_time^60^The maximum duration in seconds for a script to parse input. Make it reasonably optimal as overly complex inputs may be crafted by attackers to launch injections attacks.^none
output_buffering^4096^If you are having performance problems on Windows 2003 and IIS, you might try setting output_buffering = On. Having it set to off apparently effects the performance of Windows 2003 and IIS severely even for web pages that do not use PHP or MySQL.^none
register_argc_argv^Off^Tells PHP whether to declare the argv and argc variables that would contain the GET information. See also command line. Also, this directive became available in PHP 4.0.0 and was always on before that.^none
register_long_arrays^Off^Tells PHP whether or not to register the deprecated long $HTTP_*_VARS type predefined variables. When On (default), long predefined PHP variables like $HTTP_GET_VARS will be defined. If you are not using them, it is recommended to turn them off, for performance reasons. Instead, use the superglobal arrays, like $_GET. This directive became available in PHP 5.0.0.^none
safe_mode^On^By enabling safe_mode parameter, PHP scripts are able to access files only when their owner is the owner of the PHP scripts. This is one of the most important security mechanisms built into the PHP. Effectively counteracts unauthorized attempts to access system files (e.g. /etc/paswd) and adds many restrictions that make unauthorized access more difficult.^none
safe_mode_exec_dir^non empty directory^When safe_mode is turned on, system(), exec() and other functions that execute system programs will refuse to start those programs, if they are not placed in the specified directory.^none
safe_mode_gid^Off^When safe_mode is turned on and safe_mode_gid is turned off, PHP scripts are able to access files not only when UIDs are the same, but also when the group of the owner of the PHP script is the same as the group of the owner of the file.^none
sendmail_from^from field of email^used under windows only. Is the value that will be inserted into from field on email notices.^none
session.bug_compat_42^Off^PHP versions 4.2.3 and lower have an undocumented feature/bug that allows you to initialize a session variable in the global scope, albeit register_globals is disabled. PHP 4.3.0 and later will warn you, if this feature is used, and if session.bug_compat_warn is also enabled. This feature/bug can be disabled by disabling this directive.^none
session.cookie_httponly^On^Marks the cookie as accessible only through the HTTP protocol. This means that the cookie will not be accessible by scripting languages, such as JavaScript. This setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers).^none
session.gc_divisor^100^Defines the probability that the gc (garbage collection) process is started on every session initialization. The probability is calculated by using gc_probability/gc_divisor, e.g. 1/100 means there is a 1% chance that the GC process starts on each request. session.gc_divisor defaults to 100.It is suggested not to make the value too high so as not to result with smaller probability which equates to almost no garbage collection.^none
short_open_tag^Off^Tells PHP whether the short form (<? ?>) of PHP open tag should be allowed. If you want to use PHP in combination with XML, you can disable this option in order to use <?xml ?> inline.^none
smtp_port^25^Used under Windows only: Number of the port to connect to the server specified with the SMTP setting when sending mail with mail(); defaults to 25. Only available since PHP 4.3.0.^none
soap_wsdl_cache_dir^root:/tmp.apache/tmp^sets the directory name where SOAP extension will put cache files^none
variables_order^EGPCS^Sets the order of the EGPCS order, Environment, Get, Post,Cookie, and Server variable parsing. For example, if variables_order is set to SP then PHP will create thesuperglobals $_SERVER and $_POST, but not create$_ENV, $_GET, and $_COOKIE. Setting to empty string means nosuperglobals will be set.^none